const Datastore = require('@google-cloud/datastore');
const uuidV4 = require('uuid/v4');
const datastore = Datastore();
/**
 * Class that handles queries to user datastore
 */
class UserStore {
  /**
   * Datastore namespace name.
   */
  get namespace() {
    return 'Modules';
  }
  /**
   * Entity group name
   *
   * @type {String}
   */
  get entityGroup() {
    return 'User';
  }
  /**
   * Generates a User group key based on the user id.
   *
   * @param {String} userId User id
   * @return {Object} User datastore key.
   */
  getUserKey(userId) {
    return datastore.key({
      namespace: this.namespace,
      path: [this.entityGroup, userId]
    });
  }
  /**
   * Finds a user record in the datastore.
   *
   * @param {String} id User id
   * @return {Promise} Promise resolved to a user object.
   */
  findUser(id) {
    const entryKey = this.getUserKey(id);
    return datastore.get(entryKey)
    .then((data) => data[0]);
  }
  /**
   * Finds or creates a user from a `profile` object depending on
   * a `provider`
   *
   * @param {Object} profile Profile object generated by Passport.
   * @param {String} provider Provider name
   * @return {Promise} Resolved to a user object.
   */
  findOrCreate(profile, provider) {
    if (provider !== 'github') {
      return Promise.reject(new Error('Unknown provider'));
    }
    if (!profile || !profile.id) {
      return Promise.reject(new Error('Profile not created.'));
    }
    return this.findByGihubId(profile.id)
    .then((user) => {
      if (!user) {
        return this.createGithubProfile(profile);
      }
      return user;
    });
  }
  /**
   * Finds a user by it's Github ID.
   *
   * @param {String} id Github ID
   * @return {Promise}
   */
  findByGihubId(id) {
    const query = datastore.createQuery(this.namespace, this.entityGroup)
    .filter('provider', '=', 'github')
    .filter('providerId', '=', id)
    .limit(1);
    return datastore.runQuery(query)
    .then((data) => data[0][0]);
  }
  /**
   * Creates a user object from a Github profile response.
   *
   * @param {Object} profile Returned by passport user profile.
   * @return {Promise} Promise resolved to a user object.
   */
  createGithubProfile(profile) {
    const userId = uuidV4();
    const key = this.getUserKey(userId);
    const email = profile.emails && profile.emails[0] &&
      profile.emails[0].value;
    const photo = profile.photos && profile.photos[0] &&
      profile.photos[0].value;
    const user = {
      key: key,
      data: [{
        name: 'provider',
        value: 'github',
        excludeFromIndexes: false
      }, {
        name: 'providerId',
        value: profile.id,
        excludeFromIndexes: false
      }, {
        name: 'name',
        value: profile.displayName,
        excludeFromIndexes: true
      }, {
        name: 'providerProfileUrl',
        value: profile.profileUrl,
        excludeFromIndexes: true
      }, {
        name: 'providerEmail',
        value: email,
        excludeFromIndexes: false
      }, {
        name: 'providerPhoto',
        value: photo,
        excludeFromIndexes: true
      }, {
        name: 'eula',
        value: false,
        excludeFromIndexes: true
      }, {
        name: 'modulesCount',
        value: 0,
        excludeFromIndexes: true
      }, {
        name: 'themesCount',
        value: 0,
        excludeFromIndexes: true
      }]
    };
    return datastore.save(user)
    .then(() => this.findUser(userId));
  }
}
module.exports.UserStore = UserStore;
